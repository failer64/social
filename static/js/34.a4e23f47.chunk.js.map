{"version":3,"file":"static/js/34.a4e23f47.chunk.js","mappings":"wKACA,EAA0B,yB,oBCA1B,EAAuB,mBAAvB,EAAoD,sBAApD,EAAkF,oBAAlF,EAA6G,mBAA7G,EAA0I,sBAA1I,EAAuK,mB,gDCqCvK,EAxB4B,SAAC,GAAqB,IAApBA,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QAE5BC,EAAO,YAAcF,EAAKG,GAM9B,OAAQ,UAAC,KAAD,CAASC,GAAIF,EAAMG,UAAWC,IAAGC,GAAD,UAAgBA,EAAiBP,EAAKQ,iBAC7DC,QAAS,kBALZN,EAKuBH,EAAKG,QAJtCF,EAAQE,GADC,IAACA,CAKY,EADlB,WAEA,gBAAKE,UAAWE,EAAhB,UACI,gBAAKG,IAAKV,EAAKW,OAAOC,OAASC,EAAeC,IAAI,cAEtD,gBAAKT,UAAWE,EAAhB,SACKP,EAAKe,YAEV,gBAAKV,UAAWE,KAChB,gBAAKF,UAAWE,EAAhB,SACKP,EAAKgB,2BAIrB,ECRD,EAZsC,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,WAAYjB,EAAa,EAAbA,QAMzD,OAJAkB,EAAAA,EAAAA,YAAU,WACND,GACH,GAAE,KAGC,gBAAKb,UAAWE,EAAhB,SACKU,EAAQG,KAAI,SAACC,GAAD,OAAoB,SAAC,EAAD,CAAMrB,KAAMqB,EAAcpB,QAASA,GAAfoB,EAAElB,GAA1C,KAExB,E,0DCdGmB,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,OAE1B,ECgBD,GAAeE,E,QAAAA,KACXC,EAAAA,EAAAA,KAdoB,SAACJ,GAAD,MAA0C,CAC9DN,QAASM,EAAMK,YAAYX,QADP,IAIG,SAACY,GAAD,MAAoB,CAC3CX,WAAY,WACRW,GAASX,EAAAA,EAAAA,MACZ,EACDjB,QAAS,SAACE,GACN0B,GAAS5B,EAAAA,EAAAA,IAAQE,GACpB,EANsB,KDLK,SAAC2B,GAAoB,IAE3CC,EAF0C,0IAG5C,WACI,OAAMC,KAAKC,MAAMT,QAEV,SAACM,GAAD,UAAeE,KAAKC,SAFM,SAAC,KAAD,CAAU7B,GAAI,UAGlD,KAP2C,GAEhB8B,EAAAA,WAYhC,OAHIP,EAAAA,EAAAA,IACIL,EADJK,CACgCI,EAGvC,GCDD,CAKEI,E","sources":["webpack://social/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social/./src/components/Dialogs/Item/Item.module.css?d5ee","components/Dialogs/Item/Item.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__T2crw\",\"items\":\"Dialogs_items__vMcxN\",\"messages\":\"Dialogs_messages__VPJSo\",\"form\":\"Dialogs_form__hizr5\",\"title\":\"Dialogs_title__PlclM\",\"input\":\"Dialogs_input__FTZHz\",\"button\":\"Dialogs_button__xhOM4\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Item_item__pAvp6\",\"message\":\"Item_message__oSdk3\",\"image\":\"Item_image__zYZfj\",\"name\":\"Item_name__uZrea\",\"content\":\"Item_content__zDu-d\",\"date\":\"Item_date__jLJMK\"};","import {NavLink} from \"react-router-dom\";\r\nimport styles from \"./Item.module.css\"\r\nimport React, {FC} from \"react\";\r\nimport {DialogsType} from \"../../../api/dialogs-api\";\r\n// @ts-ignore\r\nimport defaultAvatar from './../../../assets/img/avatar.jpg'\r\nimport cn from \"classnames\";\r\n\r\n\r\ntype PropsType = {\r\n    item: DialogsType\r\n    getChat: (id: number) => void\r\n}\r\n\r\nconst Item: FC<PropsType> = ({item, getChat}) => {\r\n\r\n    let path = '/dialogs/' + item.id;\r\n\r\n    const chat = (id: number) => {\r\n        getChat(id);\r\n    }\r\n\r\n    return (<NavLink to={path} className={cn(styles.item, {[styles.message]: item.hasNewMessages})}\r\n                     onClick={() => chat(item.id)}>\r\n            <div className={styles.image}>\r\n                <img src={item.photos.small || defaultAvatar} alt=\"Avatar\"/>\r\n            </div>\r\n            <div className={styles.name}>\r\n                {item.userName}\r\n            </div>\r\n            <div className={styles.content}></div>\r\n            <div className={styles.date}>\r\n                {item.lastDialogActivityDate}\r\n            </div>\r\n        </NavLink>\r\n    );\r\n}\r\n\r\nexport default Item;","import styles from './Dialogs.module.css'\r\nimport Item from './Item/Item';\r\nimport React, {FC, useEffect,} from \"react\";\r\nimport {MessageType} from \"../../types/types\";\r\nimport {DialogsType} from \"../../api/dialogs-api\";\r\n\r\n\r\ntype PropsDialogsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n    addMessage: (text: string) => void\r\n    getDialogs: () => void\r\n    getChat: () => void\r\n}\r\n\r\n\r\nconst Dialogs: FC<PropsDialogsType> = ({dialogs, getDialogs, getChat}) => {\r\n\r\n    useEffect(() => {\r\n        getDialogs();\r\n    }, [])\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            {dialogs.map((i: DialogsType) => <Item item={i} key={i.id} getChat={getChat}/>)}\r\n        </div>);\r\n}\r\n\r\nexport default Dialogs;","import {Navigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {}\r\ntype OwnPropsType = {}\r\n\r\nlet mapStateToPropsForRedirect = (state: StateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n\r\n    class RedirectComponent extends React.Component<MapStatePropsType> {\r\n        render() {\r\n            if (!(this.props.isAuth)) return <Navigate to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent =\r\n        connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, StateType>(\r\n            mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import {getChat, getDialogs} from '../../redux/dialogs-reducer'\r\nimport {connect} from 'react-redux';\r\nimport Dialogs from './Dialogs'\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {DialogsType} from \"../../api/dialogs-api\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: Array<DialogsType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getDialogs: () => void\r\n    getChat: (id: number) => void\r\n}\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    dialogs: state.dialogsPage.dialogs,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n    getDialogs: () => {\r\n        dispatch(getDialogs());\r\n    },\r\n    getChat: (id: number) => {\r\n        dispatch(getChat(id));\r\n    }\r\n})\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, StateType>(\r\n        mapStateToProps,\r\n        mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs);\r\n"],"names":["item","getChat","path","id","to","className","cn","styles","hasNewMessages","onClick","src","photos","small","defaultAvatar","alt","userName","lastDialogActivityDate","dialogs","getDialogs","useEffect","map","i","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogsPage","dispatch","Component","RedirectComponent","this","props","React","Dialogs"],"sourceRoot":""}