{"version":3,"file":"static/js/121.945b06c1.chunk.js","mappings":"kJACA,MAA0B,yBAA1B,EAAyD,qB,oBCAzD,EAAuB,mBAAvB,EAAoD,sBAApD,EAAkF,oBAAlF,EAA6G,mBAA7G,EAA0I,sBAA1I,EAAuK,mB,mECS1JA,EAAsB,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAC3BC,GAAWC,EAAAA,EAAAA,MAEbC,EAAO,YAAcH,EAAKI,GAM9B,OAAQ,UAAC,KAAD,CAASC,GAAIF,EAAMG,UAAWC,IAAGC,GAAD,UAAgBA,EAAiBR,EAAKS,iBAC7DC,QAAS,kBALZN,EAKuBJ,EAAKI,QAJtCH,GAASU,EAAAA,EAAAA,IAAQP,IADR,IAACA,CAKY,EADlB,WAEA,gBAAKE,UAAWE,EAAhB,UACI,gBAAKI,IAAKZ,EAAKa,OAAOC,OAASC,EAAeC,IAAI,cAEtD,gBAAKV,UAAWE,EAAhB,SACKR,EAAKiB,YAEV,gBAAKX,UAAWE,KAChB,gBAAKF,UAAWE,EAAhB,SACKR,EAAKkB,2BAIrB,E,8BCOD,EA7BoB,WAChB,IAAMC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,GACtBC,GAASF,EAAAA,EAAAA,IAAYG,EAAAA,GACrBtB,GAAWC,EAAAA,EAAAA,MAEXsB,GAAiBC,EAAAA,EAAAA,QAAuB,MAgB9C,OAXAC,EAAAA,EAAAA,YAAU,WACHJ,GACCrB,GAAS0B,EAAAA,EAAAA,MAGhB,GAAE,KAEHD,EAAAA,EAAAA,YAAU,YAXU,WAAO,IAAD,EACtB,UAAAF,EAAeI,eAAf,SAAwBC,gBAC3B,CAUGC,EACH,GAAE,CAACX,IAECG,GAED,iBAAKhB,UAAWE,EAAhB,WACI,gBAAKuB,IAAKP,EAAgBlB,UAAWE,IACpCW,EAAQa,KAAI,SAACC,GAAD,OAAoB,SAAClC,EAAD,CAAMC,KAAMiC,GAAQA,EAAE7B,GAA1C,QAJD,SAAC,KAAD,CAAUC,GAAI,UAMrC,C","sources":["webpack://social/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social/./src/components/Dialogs/Item/Item.module.css?d5ee","components/Dialogs/Item/Item.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__T2crw\",\"ref\":\"Dialogs_ref__5r9ih\",\"items\":\"Dialogs_items__vMcxN\",\"messages\":\"Dialogs_messages__VPJSo\",\"form\":\"Dialogs_form__hizr5\",\"title\":\"Dialogs_title__PlclM\",\"input\":\"Dialogs_input__FTZHz\",\"button\":\"Dialogs_button__xhOM4\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Item_item__pAvp6\",\"message\":\"Item_message__oSdk3\",\"image\":\"Item_image__zYZfj\",\"name\":\"Item_name__uZrea\",\"content\":\"Item_content__zDu-d\",\"date\":\"Item_date__jLJMK\"};","import {NavLink} from \"react-router-dom\";\r\nimport styles from \"./Item.module.css\"\r\nimport React, {FC} from \"react\";\r\nimport {DialogsType} from \"../../../api/dialogs-api\";\r\nimport defaultAvatar from './../../../assets/img/avatar.jpg'\r\nimport cn from \"classnames\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getChat} from \"../../../redux/dialogs-reducer\";\r\n\r\n\r\nexport const Item: FC<PropsType> = ({item}) => {\r\n    const dispatch = useDispatch<any>();\r\n\r\n    let path = '/dialogs/' + item.id;\r\n\r\n    const chat = (id: number) => {\r\n        dispatch(getChat(id));\r\n    }\r\n\r\n    return (<NavLink to={path} className={cn(styles.item, {[styles.message]: item.hasNewMessages})}\r\n                     onClick={() => chat(item.id)}>\r\n            <div className={styles.image}>\r\n                <img src={item.photos.small || defaultAvatar} alt=\"Avatar\"/>\r\n            </div>\r\n            <div className={styles.name}>\r\n                {item.userName}\r\n            </div>\r\n            <div className={styles.content}></div>\r\n            <div className={styles.date}>\r\n                {item.lastDialogActivityDate}\r\n            </div>\r\n        </NavLink>\r\n    );\r\n}\r\n\r\ntype PropsType = {\r\n    item: DialogsType\r\n}","import styles from './Dialogs.module.css'\r\nimport {Item} from './Item/Item';\r\nimport React, {FC, useEffect, useRef,} from \"react\";\r\nimport {DialogsType} from \"../../api/dialogs-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getDialogsSelector} from \"../../redux/selectors/dialogs-selectors\";\r\nimport {getDialogs} from \"../../redux/dialogs-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {isAuthSelector} from \"../../redux/selectors/auth-selectors\";\r\n\r\n\r\nconst Dialogs: FC = () => {\r\n    const dialogs = useSelector(getDialogsSelector);\r\n    const isAuth = useSelector(isAuthSelector);\r\n    const dispatch = useDispatch<any>();\r\n    // scroll into top\r\n    const messagesTopRef = useRef<HTMLDivElement>(null);\r\n    const scrollToTop = () => {\r\n        messagesTopRef.current?.scrollIntoView()\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isAuth){\r\n            dispatch(getDialogs());\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        scrollToTop();\r\n    }, [dialogs])\r\n\r\n    if (!isAuth) return <Navigate to={'/login'}/>;\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div ref={messagesTopRef} className={styles.ref}/>\r\n            {dialogs.map((d: DialogsType) => <Item item={d} key={d.id}/>)}\r\n        </div>);\r\n}\r\n\r\nexport default Dialogs;"],"names":["Item","item","dispatch","useDispatch","path","id","to","className","cn","styles","hasNewMessages","onClick","getChat","src","photos","small","defaultAvatar","alt","userName","lastDialogActivityDate","dialogs","useSelector","getDialogsSelector","isAuth","isAuthSelector","messagesTopRef","useRef","useEffect","getDialogs","current","scrollIntoView","scrollToTop","ref","map","d"],"sourceRoot":""}